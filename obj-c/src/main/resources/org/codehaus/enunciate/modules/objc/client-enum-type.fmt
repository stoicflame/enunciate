[#ftl]
[#--template for the client-side enum type.--]
[#macro writeEnumTypeHeader type]
  [#assign typeName=nameForTypeDefinition(type)/]
#ifndef DEF_${typeName}_H
#define DEF_${typeName}_H

/**
 * ${type.docComment!"(no documentation provided)"?chop_linebreak?replace("\n", "\n * ")}
 */
enum ${typeName}
{
[#list type.enumConstants as constant]

  /**
   * ${constant.docComment!"(no documentation provided)"?chop_linebreak?replace("\n", "\n   * ")}
   */
  ${nameForEnumConstant(type, constant)}[#if constant_has_next],[/#if]
[/#list]
};
  [#if !(type.QNameEnum!false)]
/**
 * Reads a ${type.clientSimpleName} from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The ${type.clientSimpleName}, or NULL if unable to be read.
 */
static enum ${typeName} *xmlTextReaderRead${typeName}Type(xmlTextReaderPtr reader);

/**
 * Writes a ${type.clientSimpleName} to XML.
 *
 * @param writer The XML writer.
 * @param _${type.clientSimpleName?uncap_first} The ${type.clientSimpleName} to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWrite${typeName}Type(xmlTextWriterPtr writer, enum ${typeName} *_${type.clientSimpleName?uncap_first});

/**
 * Utility method for getting the enum value for a string.
 *
 * @param _${type.clientSimpleName?uncap_first} The string to format.
 * @return The enum value or NULL on error.
 */
static enum ${typeName} *formatStringTo${typeName}Type(NSString *_${type.clientSimpleName?uncap_first});

/**
 * Utility method for getting the string value of ${type.clientSimpleName}.
 *
 * @param _${type.clientSimpleName?uncap_first} The ${type.clientSimpleName} to format.
 * @return The string value or NULL on error.
 */
static NSString *format${typeName}TypeToString(enum ${typeName} *_${type.clientSimpleName?uncap_first});
  [#else]
/**
 * Gets the known ${type.clientSimpleName} for a QName.
 *
 * @param qname The QName
 * @return The ${type.clientSimpleName}, or -1 if unable to be read.
 */
static enum ${typeName} getKnown${typeName}(${classnameFor(type.enumBaseClass)} *qname);

/**
 * Convert a known ${type.clientSimpleName} to a QName.
 *
 * @param _${type.clientSimpleName?uncap_first} The known ${type.clientSimpleName}.
 * @return The QName, or nil if an unknown enum constant.
 */
static ${classnameFor(type.enumBaseClass)} *convertKnown${typeName}(enum ${typeName} _${type.clientSimpleName?uncap_first});
  [/#if]
#endif /* DEF_${typeName}_H */
[/#macro]
[#macro writeEnumTypeImpl type]
  [#assign typeName=nameForTypeDefinition(type)/]
#ifndef DEF_${typeName}_M
#define DEF_${typeName}_M
  [#if !(type.QNameEnum!false)]

/**
 * Reads a ${type.clientSimpleName} from XML. The reader is assumed to be at the start element.
 *
 * @param reader The XML reader.
 * @return The ${type.clientSimpleName}, or NULL if unable to be read.
 */
static enum ${typeName} *xmlTextReaderRead${typeName}Type(xmlTextReaderPtr reader)
{
  xmlChar *enumValue = xmlTextReaderReadEntireNodeValue(reader);
  enum ${typeName} *value = calloc(1, sizeof(enum ${typeName}));
  if (enumValue != NULL) {
    [#assign enumValueMap=type.enumValues/]
    [#list type.enumConstants as constant]
    if (xmlStrcmp(enumValue, BAD_CAST "${enumValueMap[constant.simpleName]}") == 0) {
      *value = ${nameForEnumConstant(type, constant)};
      free(enumValue);
      return value;
    }
    [/#list]
#if DEBUG_ENUNCIATE
    NSLog(@"Attempt to read enum value failed: %s doesn't match an enum value.", enumValue);
#endif
  }
#if DEBUG_ENUNCIATE
  else {
    NSLog(@"Attempt to read enum value failed: NULL value.");
  }
#endif

  return NULL;
}

/**
 * Utility method for getting the enum value for a string.
 *
 * @param _${type.clientSimpleName?uncap_first} The string to format.
 * @return The enum value or NULL on error.
 */
static enum ${typeName} *formatStringTo${typeName}Type(NSString *_${type.clientSimpleName?uncap_first})
{
  enum ${typeName} *value = calloc(1, sizeof(enum ${typeName}));
    [#assign enumValueMap=type.enumValues/]
    [#list type.enumConstants as constant]
      [#if constant_index == 0]
  if (${"[@"}"${enumValueMap[constant.simpleName]}" isEqualToString:_${type.clientSimpleName?uncap_first}]) {
    *value = ${nameForEnumConstant(type, constant)};
  }
      [#elseif !constant_has_next]
  else{
    value = NULL;
  }
      [#else]
  else if (${"[@"}"${enumValueMap[constant.simpleName]}" isEqualToString:_${type.clientSimpleName?uncap_first}]) {
    *value = ${nameForEnumConstant(type, constant)};
  }
    [/#if]
    [/#list]
#if DEBUG_ENUNCIATE
  NSLog(@"Attempt to read enum value failed: %s doesn't match an enum value.", _${type.clientSimpleName?uncap_first});
#endif

  return value;
}

/**
 * Writes a ${type.clientSimpleName} to XML.
 *
 * @param writer The XML writer.
 * @param _${type.clientSimpleName?uncap_first} The ${type.clientSimpleName} to write.
 * @return The bytes written (may be 0 in case of buffering) or -1 in case of error.
 */
static int xmlTextWriterWrite${typeName}Type(xmlTextWriterPtr writer, enum ${typeName} *_${type.clientSimpleName?uncap_first})
{
  switch (*_${type.clientSimpleName?uncap_first}) {
    [#assign enumValueMap=type.enumValues/]
    [#list type.enumConstants as constant]
    case ${nameForEnumConstant(type, constant)}:
      return xmlTextWriterWriteString(writer, BAD_CAST "${enumValueMap[constant.simpleName]}");
    [/#list]
  }

#if DEBUG_ENUNCIATE
  NSLog(@"Unable to write enum value (no valid value found).");
#endif
  return -1;
}

/**
 * Utility method for getting the string value of ${type.clientSimpleName}.
 *
 * @param _${type.clientSimpleName?uncap_first} The ${type.clientSimpleName} to format.
 * @return The string value or NULL on error.
 */
static NSString *format${typeName}TypeToString(enum ${typeName} *_${type.clientSimpleName?uncap_first})
{
  switch (*_${type.clientSimpleName?uncap_first}) {
    [#assign enumValueMap=type.enumValues/]
    [#list type.enumConstants as constant]
    case ${nameForEnumConstant(type, constant)}:
      return @"${enumValueMap[constant.simpleName]}";
    [/#list]
    default:
      return NULL;
  }

  return NULL;
}
  [#else]
/**
 * Gets the known ${type.clientSimpleName} for a QName.
 *
 * @param qname The QName
 * @return The ${type.clientSimpleName}, or -1 if unable to be read.
 */
static enum ${typeName} getKnown${typeName}(${classnameFor(type.enumBaseClass)} *qname)
{
  if (qname) {
    [#assign enumValueMap=type.enumValues/]
    [#assign unknownQNameEnum=""/]
    [#list type.enumConstants as constant]
      [#if enumValueMap[constant.simpleName]??]
        [#if !type.uriBaseType]
    if (([#if enumValueMap[constant.simpleName].namespaceURI == ""][[qname namespaceURI] length] == 0[#else]${"[@"}"${enumValueMap[constant.simpleName].namespaceURI}" isEqualToString:[qname namespaceURI] ][/#if])
        && (${"[@"}"${enumValueMap[constant.simpleName].localPart}" isEqualToString:[qname localPart] ])) {
        [#else]
    if (${"[@"}"${enumValueMap[constant.simpleName].namespaceURI}${enumValueMap[constant.simpleName].localPart}" isEqualToString:[qname absoluteString]]) {
        [/#if]
      return ${nameForEnumConstant(type, constant)};
    }
      [#else]
        [#assign unknownQNameEnum=nameForEnumConstant(type, constant)/]
      [/#if]
    [/#list]
    [#if unknownQNameEnum = ""]
#if DEBUG_ENUNCIATE
      [#if !type.uriBaseType]
    NSLog(@"Attempt to read known qname value failed: qname {%@}%@ doesn't match an enum value: returning null.", [qname namespaceURI], [qname localPart]);
      [#else]
    NSLog(@"Attempt to read known qname value failed: qname %@ doesn't match an enum value: returning null.", [qname absoluteString]);
      [/#if]
#endif
    return -1;
    [#else]
#if DEBUG_ENUNCIATE
      [#if !type.uriBaseType]
    NSLog(@"Attempt to read known qname value failed: qname {%@}%@ doesn't match an enum value: returning ${unknownQNameEnum}.", [qname namespaceURI], [qname localPart]);
      [#else]
    NSLog(@"Attempt to read known qname value failed: qname %@ doesn't match an enum value: returning ${unknownQNameEnum}.", [qname absoluteString]);
      [/#if]
#endif
    return ${unknownQNameEnum};
    [/#if]
  }
  else {
#if DEBUG_ENUNCIATE
    NSLog(@"Attempt to read known qname value failed: nil value.");
#endif
    return -1;
  }
}

/**
 * Convert a known ${type.clientSimpleName} to a QName.
 *
 * @param _${type.clientSimpleName?uncap_first} The known ${type.clientSimpleName}.
 * @return The QName, or nil if an unknown enum constant.
 */
static ${classnameFor(type.enumBaseClass)} *convertKnown${typeName}(enum ${typeName} _${type.clientSimpleName?uncap_first})
{
  ${classnameFor(type.enumBaseClass)} *qname;
  switch (_${type.clientSimpleName?uncap_first}) {
    [#assign enumValueMap=type.enumValues/]
    [#list type.enumConstants as constant]
      [#if enumValueMap[constant.simpleName]??]
    case ${nameForEnumConstant(type, constant)}:
        [#if !type.uriBaseType]
      qname = [[QName alloc] init];
      [qname setNamespaceURI: @"${enumValueMap[constant.simpleName].namespaceURI}"];
      [qname setLocalPart: @"${enumValueMap[constant.simpleName].localPart}"];
      [qname setPrefix: @"${prefix(enumValueMap[constant.simpleName].namespaceURI)}"];
        [#else]
      qname = [NSURL URLWithString: @"${enumValueMap[constant.simpleName].namespaceURI}${enumValueMap[constant.simpleName].localPart}"];
        [/#if]
      [qname autorelease];
      return qname;
      [#else]
    case ${nameForEnumConstant(type, constant)}:
#if DEBUG_ENUNCIATE
      NSLog(@"Unable to convert enum value ${nameForEnumConstant(type, constant)}.");
#endif
      return nil;
      [/#if]
    [/#list]
  }

#if DEBUG_ENUNCIATE
  NSLog(@"Unable to write enum value (no valid value found).");
#endif
  return nil;
}
  [/#if]
#endif /* DEF_${typeName}_M */
[/#macro]