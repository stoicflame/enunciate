[#ftl]
[#--

    Copyright Â© 2006-2016 Web Cohesion (info@webcohesion.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

--]
[#-- @ftlvariable name="syntaxes" type="java.util.List<com.webcohesion.enunciate.api.datatype.Syntax>" --]
[#-- @ftlvariable name="apis" type="java.util.List<com.webcohesion.enunciate.api.resources.ResourceApi>" --]
[#-- @ftlvariable name="projectVersion" type="java.lang.String" --]
[#-- @ftlvariable name="projectTitle" type="java.lang.String" --]
[#-- @ftlvariable name="projectDescription" type="java.lang.String" --]
[#-- @ftlvariable name="termsOfService" type="java.lang.String" --]
[#-- @ftlvariable name="contact" type="com.webcohesion.enunciate.EnunciateConfiguration.Contact" --]
[#-- @ftlvariable name="license" type="com.webcohesion.enunciate.EnunciateConfiguration.License" --]
[#-- @ftlvariable name="host" type="java.lang.String" --]
[#-- @ftlvariable name="schemes" type="java.lang.String[]" --]
[#-- @ftlvariable name="basePath" type="java.lang.String" --]
[#-- @ftlvariable name="uniquePaths" type="java.lang.String[]" --]
[@file name="swagger.json" charset="utf-8"]
{
  "swagger": "2.0",
  "info" : {
  [#if projectDescription??]
    "description" : "${projectDescription?json_string}",
  [/#if]
  [#if termsOfService??]
    "termsOfService" : "${termsOfService?json_string}",
  [/#if]
  [#if contact?? && contact.name??]
    "contact" : {
    [#if contact.url??]
      "url" : "${contact.url}",
    [/#if]
    [#if contact.email??]
      "email" : "${contact.email}",
    [/#if]
      "name" : "${contact.name}"
    },
  [/#if]
  [#if license?? && license.name??]
    "license" : {
    [#if license.url??]
      "url" : "${license.url}",
    [/#if]
      "name" : "${license.name?json_string}"
    },
  [/#if]
    "version" : "${projectVersion!"0.0.0"}",
    "title" : "${projectTitle?json_string}"
  },
  [#if host??]
  "host" : "${host?json_string}",
  [/#if]
  [#if basePath??]
  "basePath" : "${basePath}",
  [/#if]
  [#if schemes??]
  "schemes" : [[#list schemes as scheme]"${scheme}"[#if scheme_has_next], [/#if][/#list]],
  [/#if]
  "tags" : [
  [#assign comma=false/]
  [#list apis as api]
    [#list api.resourceGroups as resourceGroup]
      [#if comma]
    ,
      [/#if]
      [#assign comma=true/]
    {
      "name" : "${resourceGroup.label?json_string}"
      [#if resourceGroup.description?? && resourceGroup.description?length > 0]
      ,
      "description" : "${resourceGroup.description?keep_before("<")?keep_before(".")?trim?json_string + '.'}"
      [/#if]
    }
    [/#list]
  [/#list]
  ],
  "definitions" : {
  [#assign comma=false/]
  [#list syntaxes as syntax]
    [#assign syntaxIsJson=syntax.isAssignableToMediaType("application/json")/]
    [#list syntax.namespaces as namespace]
      [#list namespace.types as dataType]
        [#if comma]
    ,
        [/#if]
        [#assign comma=true/]
    "${dataType.slug}" : {
      "type" : "${baseDatatypeNameFor(dataType)}",
        [#if dataType.xmlName??]
      "xml" : {
        "name" : "${dataType.xmlName}",
        "namespace" : "${dataType.namespace.uri!""}"
      },
        [/#if]
      "title" : "${dataType.label?json_string}",
        [#if dataType.requiredProperties?? && dataType.requiredProperties?size > 0]
      "required" : [[#list dataType.requiredProperties as requiredProperty]"${requiredProperty.name}"[#if requiredProperty_has_next], [/#if][/#list]],
        [/#if]
        [#assign hasSupertype = (dataType.supertypes?? && dataType.supertypes?size > 0)/]
        [#if hasSupertype]
          [#assign supertype = dataType.supertypes[0]/]
      "allOf" : [
          [#if supertype.slug??]
        {
          "$ref" : "#/definitions/${supertype.slug}"
        },
          [/#if]
        {
        [/#if]
        [#if dataType.properties?? && dataType.properties?size > 0]
          "properties" : {
          [#list dataType.properties as property]
            "${property.name}" : {
            [#if property.namespaceInfo??]
              "xml" : {
              [#if property.wrapperName??]
                "name" : "${property.wrapperName}",
                "wrapped" : true,
              [/#if]
              [#if property.attribute!false]
                "attribute" : true,
              [/#if]
                "namespace" : "${property.namespace!""}"
              },
            [/#if]
            [#if syntaxIsJson]
              [#assign example=jsonExampleFor(property)!""/]
              [#if example?length > 0]
            "example" : ${example},
              [/#if]
            [/#if]
            [#assign constraints=constraintsFor(property, property.dataType.containers?? && property.dataType.containers?size > 0)/]
            [#list constraints?keys as constraint]
            "${constraint}" : [#if constraints[constraint]?is_boolean]${constraints[constraint]?c}[#elseif constraints[constraint]?is_number]${constraints[constraint]?c}[#else]"${constraints[constraint]?json_string}"[/#if],
            [/#list]
            "readOnly" : ${property.readOnly?c},
            [@referenceDataType dataType=property.dataType description=(property.description!"") defaultType="object"/]
            }[#if property_has_next],[/#if]
          [/#list]
          }[#if !hasSupertype],[/#if]
        [#elseif dataType.values?? && dataType.values?size > 0]
          "enum" : [
          [#list dataType.values as value]
            "${value.value?json_string}"[#if value_has_next],[/#if]
          [/#list]
          ][#if !hasSupertype],[/#if]
        [/#if]
        [#if hasSupertype]
        }
      ],
        [/#if]
        [#if syntaxIsJson]
          [#assign example=jsonExampleFor(dataType)!""/]
          [#if example?length > 0]
      "example" : ${example},
          [/#if]
        [/#if]
      "description" : "${(dataType.description!"")?json_string}"
    }
      [/#list]
    [/#list]
  [/#list]
  },
  "paths": {
  [#assign comma=false/]
  [#list uniquePaths as uniquePath]
    [#if comma]
    ,
    [/#if]
    "${uniquePath?json_string}" : {
    [#assign comma=true/]
    [#list apis as api]
      [#assign comma2=false/]
      [#list api.resourceGroups as resourceGroup]
        [#list resourceGroup.resources as resource]
          [#if resource.path = uniquePath]
            [#list resource.methods as method]
              [#if comma2]
      ,
              [/#if]
              [#assign comma2=true/]
      "${method.httpMethod?lower_case}" : {
              [#if resourceGroup.deprecated?? || method.deprecated??]
        "deprecated":true,
              [/#if]
        "tags" : [ "${resourceGroup.label?json_string}" ],
              [#if method.description?? && method.description?length > 0]
        "summary" : "${method.description?keep_before("<")?keep_before(".")?trim?json_string + '.'}",
        [/#if]
        "description" : "${(method.description!"")?json_string}",
        "operationId" : "${operationIdFor(method)}",
                [#if method.requestEntity??]
        "consumes" : [ [#list uniqueMediaTypesFor(method.requestEntity) as mediaType]"${mediaType.mediaType}"[#if mediaType_has_next], [/#if][/#list] ],
                [/#if]
                [#if method.responseEntity??]
        "produces" : [ [#list uniqueMediaTypesFor(method.responseEntity) as mediaType]"${mediaType.mediaType}"[#if mediaType_has_next], [/#if][/#list] ],
                [/#if]
        "parameters" : [
                [#if method.parameters?? && method.parameters?size > 0]
                  [#list validParametersOf(method) as parameter]
                  [#-- @ftlvariable name="parameter" type="com.webcohesion.enunciate.api.resources.Parameter" --]
          {
            "name" : "${parameter.name}",
            "in" : "${parameter.typeLabel}",
                    [#if (parameter.typeLabel == "path"
                        || parameter.typeLabel == "query"
                        || parameter.typeLabel == "formData"
                        || parameter.typeLabel == "header") && parameter.constraints?? && parameter.constraints?contains("required")]
            "required" :
                    [/#if]
                    [#if parameter.defaultValue??]
            "default" : "${parameter.defaultValue}",
                    [/#if]
                    [#if parameter.multivalued]
            "type" : "array",
            "items" : {
                    [/#if]
                    [#if parameter.constraintValues??]
            "type" : "${parameter.typeName}",
            "enum" : [[#list parameter.constraintValues as constraintValue]"${constraintValue}"[#if constraintValue_has_next], [/#if][/#list]][#if !parameter.multivalued],[/#if]
                    [#elseif parameter.typeFormatName??]
            "type" : "${parameter.typeName}",
            "format" : "${parameter.typeFormatName}"[#if !parameter.multivalued],[/#if]
                    [#else]
            "type" : "${parameter.typeName}"[#if !parameter.multivalued],[/#if]
                    [/#if]
                    [#if parameter.multivalued]
            },
            "collectionFormat" : "multi",
                    [/#if]
                    [#assign constraints=constraintsFor(parameter, parameter.multivalued)/]
                    [#list constraints?keys as constraint]
            "${constraint}" : [#if constraints[constraint]?is_boolean]${constraints[constraint]?c}[#elseif constraints[constraint]?is_number]${constraints[constraint]?c}[#else]"${constraints[constraint]?json_string}"[/#if],
                    [/#list]
            "description" : "${(parameter.description!"")?json_string}"
          }[#if parameter_has_next || method.requestEntity??],[/#if]
                   [/#list]
                  [/#if]
                  [#if method.requestEntity??]
          {
            "name" : "body",
            "in" : "body",
                    [#if findBestDataType(method.requestEntity)??]
            "schema" : {
                      [@referenceDataType dataType=findBestDataType(method.requestEntity) description=method.requestEntity.description!""/]
            },
                    [#else]
            "type" : "file",
                    [/#if]
            "description" : "${(method.requestEntity.description!"")?json_string}"
          }
                  [/#if]
        ],
        "responses" : {
                  [#list responsesOf(method) as response]
                [#-- @ftlvariable name="response" type="com.webcohesion.enunciate.modules.swagger.SwaggerResponse" --]
          "${response.code}" : {
                  [#if response.dataType??]
            "schema" : {
                  [@referenceDataType dataType=response.dataType description=response.description!""/]
            },
                  [/#if]
                  [#if response.headers?? && response.headers?has_content]
            "headers" : {
                    [#list response.headers as header]
              "${header.name}" : {
                "description" : "${(header.description!"")?json_string}",
                      [#assign constraints=constraintsFor(header, header.multivalued)/]
                      [#list constraints?keys as constraint]
                "${constraint}" : [#if constraints[constraint]?is_boolean]${constraints[constraint]?c}[#elseif constraints[constraint]?is_number]${constraints[constraint]?c}[#else]"${constraints[constraint]?json_string}"[/#if],
                      [/#list]
                "type" : "string"
              }[#if header_has_next],[/#if]
                    [/#list]
            },
                  [/#if]
                  [#assign examples = jsonExamplesFor(method.responseEntity)/]
                  [#list examples?keys as mediaType]
            "example" : ${examples[mediaType]},
                    [#break/]
                  [/#list]
            "description" : "${(response.description!"")?json_string}"
          }[#if response_has_next],[/#if]
                [/#list]
        }
      }
            [/#list]
          [/#if]
        [/#list]
      [/#list]
    [/#list]
    }
  [/#list]
  }
}
[/@file]
[#macro referenceDataType dataType description="" defaultType="file"]
  [#-- @ftlvariable name="dataType" type="com.webcohesion.enunciate.api.datatype.DataTypeReference" --]
  [#if dataType.value??]
    [#if dataType.containers?? && dataType.containers?size > 0]
"description" : "${description?json_string}",
      [#list dataType.containers as container]
        [#if !container.isMap()]
"type" : "array",
"items" : {
        [#else]
"type" : "object",
"additionalProperties" : {
        [/#if]
        [#if !container_has_next]
  "$ref" : "#/definitions/${dataType.slug}"
        [/#if]
      [/#list]
      [#list dataType.containers as container]
}
      [/#list]
    [#else]
"$ref" : "#/definitions/${dataType.slug}"
    [/#if]
  [#elseif dataType.containers?? && dataType.containers?size > 0]
"description" : "${description?json_string}",
    [#list dataType.containers as container]
      [#if !container.isMap()]
"type" : "array",
"items" : {
      [#else]
"type" : "object",
"additionalProperties" : {
      [/#if]
      [#if !container_has_next]
  "type" : "${referencedDatatypeNameFor(dataType, "object")}"
      [/#if]
    [/#list]
    [#list dataType.containers as container]
}
    [/#list]
  [#elseif dataFormatNameFor(dataType)??]
"description" : "${description?json_string}",
"type" : "${referencedDatatypeNameFor(dataType, defaultType)}",
"format" : "${dataFormatNameFor(dataType)}"
  [#else]
"description" : "${description?json_string}",
"type" : "${referencedDatatypeNameFor(dataType, defaultType)}"
  [/#if]
[/#macro]
